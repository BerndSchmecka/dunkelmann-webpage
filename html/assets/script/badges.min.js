/*! *****************************************************************************
Copyright (c) Dunkelmann 2022. All rights reserved.

This code is licensed under the BSD License
You should have received a copy of the BSD License
with this code and it is also available through
the world-wide-web at <https://files.dunkelmann.eu/license.txt>.
If you did not receive a copy of the BSD License
and are unable to obtain it through the world-wide-web,
please send a note to <business@dunkelmann.eu> so we can mail you a copy
immediately.
***************************************************************************** */
Vue.component("badge-card",{props:["card"],template:'\n    <div class="badge-object">\n            <img width="64px" height="64px" :src="card.base_url + \'_details.svg\'" :alt="card.name" :title="card.name" :onclick="\'app.selectBadge(&quot;\' + card.uuid + \'&quot;)\'">\n    </div>\n    '});var app=new Vue({el:"#badgesApp",data:{revisionValue:"latest",revisionList:[],revText:"Laden ...",lmText:"Laden ...",countText:"Laden ...",searchValue:"",cards:[],selectedBadge:{uuid:"Laden ...",name:"Laden ...",base_url:null,description:"Laden ...",date:parseUnixTime(0),value:0},isLoading:!0,isCaching:!1,showcaseHidden:!1,webSocket:null},created:function(){this.initWebSocket(),this.getCachedRevisions()},methods:{getCachedRevisions:function(){var e=new XMLHttpRequest;e.onreadystatechange=function(){if(4===e.readyState&&200===e.status){var a=JSON.parse(e.responseText);app.revisionList=[],a.cachedRevisions.slice().reverse().forEach(e=>{app.revisionList.push({name:e,id:e})})}},e.open("GET",window.GLOBAL_ENV.BADGE_REVISIONS_ENDPOINT,!0),e.send()},initWebSocket:function(){null!=this.webSocket&&this.webSocket.close(),this.webSocket=new WebSocket(window.GLOBAL_ENV.WS_API_ENDPOINT),this.webSocket.onmessage=function(e){var a=JSON.parse(e.data);if(0===a.type){app.isCaching=!1,webSocketLog(a.msg);var t=JSON.parse(atob(a.payload)),s=t.headers["Last-Modified"][0],o=Math.floor(Date.parse(s)/1e3);t.body.badges.forEach(e=>{(""==app.searchValue||e.name.toLowerCase().includes(app.searchValue.toLowerCase())||e.description.toLowerCase().includes(app.searchValue.toLowerCase())||e.url.toLowerCase().includes(app.searchValue.toLowerCase()))&&app.cards.push({uuid:e.uuid,name:e.name,base_url:e.url,description:e.description,date:parseUnixTime(e.timestamp),value:e.value})}),app.revText=`Revisionsnummer: ${t.body.revision} [${parseUnixTime(t.body.timestamp)}]`,app.lmText=`Letzte Ã„nderung: ${parseUnixTime(o)}`,app.countText=`Zeige ${app.cards.length} von ${t.body.badges.length} Abzeichen`,app.cards.length>0?(app.selectedBadge=app.cards[app.cards.length-1],app.showcaseHidden=!1):(app.showcaseHidden=!0,app.selectedBadge={uuid:"Laden ...",name:"Laden ...",base_url:null,description:"Laden ...",date:parseUnixTime(0),value:0}),app.isLoading=!1}else 1===a.type?(app.isCaching=!0,webSocketLog(a.msg)):2===a.type?webSocketLog(`Error: ${a.msg}`):3===a.type?(webSocketLogDebug(`Received PING request from server: "${a.msg}"`),app.webSocket.send(JSON.stringify({command:"PONG",version:0,payload:a.payload})),webSocketLogDebug(`Sent PONG response to server: pongId=${base64ToUint32(a.payload)}`)):4===a.type?webSocketLogDebug(`Server acknowledged PONG response: "${a.msg}"`):webSocketLogWarn("WebSocket returned an response with an unknown type.")},this.webSocket.onopen=function(e){webSocketLog("WebSocket connected"),app.queryBadges()},this.webSocket.onclose=function(e){webSocketLog("WebSocket disconnected"),setTimeout(function(){app.initWebSocket()},1e3)},this.webSocket.onerror=function(e){webSocketLog("WebSocket error")}},queryBadges:function(){if(this.isLoading=!0,this.cards=[],this.revText="Laden ...",this.lmText="Laden ...",this.countText="Laden ...",null==this.webSocket&&this.initWebSocket(),this.webSocket.readyState!==WebSocket.OPEN)return void webSocketLog("WebSocket not ready");let e=btoa(JSON.stringify({revision:this.revisionValue}));this.webSocket.send(JSON.stringify({command:"getTeamSpeakBadges",version:1,payload:e}))},selectBadge:function(e){this.cards.forEach(a=>{a.uuid==e&&(this.selectedBadge=a)})}},watch:{revisionValue:function(){this.queryBadges()}}});
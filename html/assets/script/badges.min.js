/*! *****************************************************************************
Copyright (c) Dunkelmann 2022. All rights reserved.

This code is licensed under the BSD License
You should have received a copy of the BSD License
with this code and it is also available through
the world-wide-web at <https://files.dunkelmann.eu/license.txt>.
If you did not receive a copy of the BSD License
and are unable to obtain it through the world-wide-web,
please send a note to <business@dunkelmann.eu> so we can mail you a copy
immediately.
***************************************************************************** */
let BADGES_EP="aHR0cHM6Ly9hcGkuZHVua2VsbWFubi5ldS92Mi9nZXRUZWFtU3BlYWtCYWRnZXM=",REVISIONS_EP="aHR0cHM6Ly9hcGkuZHVua2VsbWFubi5ldS92Mi9nZXRDYWNoZWRCYWRnZVJldmlzaW9ucw==";decodeBase64=function(e){var a,s,t={},n=65,d=0,i=0,r="",c=String.fromCharCode,u=e.length;for(a="";91>n;)a+=c(n++);for(a+=a.toLowerCase()+"0123456789+/",n=0;64>n;n++)t[a.charAt(n)]=n;for(a=0;a<u;a++)for(d=(d<<6)+(n=t[e.charAt(a)]),i+=6;8<=i;)((s=d>>>(i-=8)&255)||a<u-2)&&(r+=c(s));return r},parseUnixTime=function(e){var a=new Date(1e3*e),s="0"+a.getDate(),t="0"+(a.getMonth()+1),n=a.getFullYear(),d="0"+a.getHours(),i="0"+a.getMinutes(),r="0"+a.getSeconds();return s.substr(-2)+"."+t.substr(-2)+"."+n+" - "+d.substr(-2)+":"+i.substr(-2)+":"+r.substr(-2)},Vue.component("badge-card",{props:["card"],template:'\n    <div class="col-md-auto">\n    <div class="badge-object">\n        <div class="badge-icon">\n            <img class="badge-image" :src="card.base_url + \'_details.svg\'" :alt="card.name">\n        </div>\n        <div class="badge-icon">\n            <img class="badge-image" :src="card.base_url + \'.svg\'" :alt="card.name">\n        </div>\n        <div class="badge-name">\n            <div class="badge-name-text">{{ card.name }}</div>\n        </div>\n        <div class="badge-desc">\n            <div class="badge-small-text">{{ card.description }}</div>\n        </div>\n        <div class="badge-uuid">\n            <div class="badge-guid-text">{{ card.uuid }}</div>\n        </div>\n        <div class="badge-date">\n            <div class="badge-small-text">{{ card.date }}</div>\n        </div>\n    </div>\n</div>\n    '});var app=new Vue({el:"#badgesApp",data:{revisionValue:"latest",revisionList:[],rev:0,lastMod:0,cards:[]},created:function(){this.queryBadges(),this.getCachedRevisions()},methods:{getCachedRevisions:function(){var e=new XMLHttpRequest;e.onreadystatechange=function(){if(4===e.readyState&&200===e.status){var a=JSON.parse(e.responseText);app.revisionList=[],a.cachedRevisions.forEach(e=>{app.revisionList.push({name:e,id:e})})}},e.open("GET",decodeBase64(REVISIONS_EP),!0),e.send()},queryBadges:function(){var e=new XMLHttpRequest;e.onreadystatechange=function(){if(4===e.readyState&&200===e.status){var a=JSON.parse(e.responseText);app.cards=[],app.rev=a.body.revision,app.lastMod=a.body.timestamp,a.body.badges.forEach(e=>{app.cards.push({uuid:e.uuid,name:e.name,base_url:e.url,description:e.description,date:parseUnixTime(e.timestamp),value:e.value})})}},e.open("POST",decodeBase64(BADGES_EP)),e.send(JSON.stringify({revision:this.revisionValue}))},parseUnixTime:function(e){var a=new Date(1e3*e),s="0"+a.getDate(),t="0"+(a.getMonth()+1),n=a.getFullYear(),d="0"+a.getHours(),i="0"+a.getMinutes(),r="0"+a.getSeconds();return s.substr(-2)+"."+t.substr(-2)+"."+n+" - "+d.substr(-2)+":"+i.substr(-2)+":"+r.substr(-2)}},watch:{revisionValue:function(){this.queryBadges()}}});